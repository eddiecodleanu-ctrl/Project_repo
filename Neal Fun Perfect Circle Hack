import pyautogui
import numpy as np
import keyboard
import time
from pynput import mouse
import winsound

WINDOW_WIDTH, WINDOW_HEIGHT = pyautogui.size()
center_screen = (WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2)

start_pos = None
click_pos = None  # global variable to store the click position

def click(x, y, pressed) -> bool:
    global click_pos
    if pressed:
        click_pos = (x, y)
        return False  # stop listener after first click
print("click where the center point should be")
time.sleep(10)
with mouse.Listener(on_click=click) as listener:
    winsound.Beep(1000, 200)
    listener.join()

print(f"Clicked at: {click_pos}")


circle_radius = 350
theta = np.linspace(0, 2 * np.pi, 60)

pyautogui.moveTo(click_pos)
for _ in range(1, 3 + 1):
    winsound.Beep(2000, 200)
    time.sleep(1)

def circle(center: tuple[int, int] or list[int]):
    try:
        # press the mouse down once at the start
        pyautogui.moveTo(center[0] + circle_radius, center[1])  # optional: move to start
        pyautogui.mouseDown()  # start holding the mouse button

        for angle in theta:
            x = center[0] + np.cos(angle) * circle_radius
            y = center[1] + np.sin(angle) * circle_radius
            pyautogui.moveTo(x, y)

            if keyboard.is_pressed('esc'):
                break

    finally:
        pyautogui.mouseUp()  # release the mouse button at the end
        print("Ended")

if click_pos is None:
    start_pos = center_screen
    circle(start_pos)
else:
    start_pos = click_pos
    circle(start_pos)
